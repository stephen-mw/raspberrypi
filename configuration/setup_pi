#!/bin/bash
set -euxo pipefail

# My raspberry pi setup file
#
# Warning! This will download my public keys to your user. Change this before
# running it!
#
# Author: Stephen Wood (www.heystephenwood.com)

# Our new user -- me
export NEW_USER="smw"

# My github user. Will pull these public keys
export GITHUB_USER="stephen-mw"

function setup_ramfs(){
    # Improve the life of the SD by limiting the /logs and /tmp directory to
    # a ramfs. In the future I'll probably just ship off logs with rsyslog.
    for dir in /var/log /tmp; do
        if ! grep -qP "tmpfs\s+${dir}" /etc/fstab; then
            echo -e "tmpfs\t${dir}\ttmpfs\tdefaults,noatime,nosuid,mode=0774,size=25m\t0 0\n" >> /etc/fstab
        fi
    done

    chmod 1777 /tmp
}

function setup_locale(){
    # Generate locales for US UTF-8
    sed -i 's/^en_GB.UTF-8 UTF-8/# en_GB.UTF-8 UTF-8/' /etc/locale.gen
    sed -i 's/^# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen

    locale-gen

    # Set language to EN
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export LC_MESSAGES=en_US.UTF-8

    cat > /etc/default/locale<<LOCALE
LANG=${LANG}
LC_ALL=${LC_ALL}
LC_MESSAGES=${LC_MESSAGES}
LOCALE

    localectl status

    # Set local time
    timedatectl set-timezone 'America/Mountain'

    # Set the keyboard to US
    cat > /etc/default/keyboard<<KEYBOARD
XKBMODEL="pc105"
XKBLAYOUT="us"
XKBVARIANT=""
XKBOPTIONS=""
BACKSPACE="guess"
KEYBOARD
}

function install_packages(){

    # Enable a custom local mirror
    cat > /etc/apt/sources.list.d/raspi.list<<LIST
deb http://cato.local/mirror/archive.raspberrypi.org/debian/ buster main
# Uncomment line below then 'apt-get update' to enable 'apt-get source'
#deb-src http://cato.local/mirror/archive.ubuntu.com/debian/ buster main
LIST

    cat > /etc/apt/sources.list<<LIST
deb http://cato.local/mirror/archive.raspbian.org/raspbian/ buster main contrib non-free rpi
# Uncomment line below then 'apt-get update' to enable 'apt-get source'
#deb-src http://cato.local/mirror/archive.ubuntu.com/raspbian/ buster main contrib non-free rpi
LIST

    apt update -y
    apt upgrade -y

    apt install -y    \
        curl          \
        git           \
        i2c-tools     \
        ntp           \
        python-pip    \
        python3       \
        python3-pip   \
        rng-tools     \
        rpi-update    \
        rsyslog       \
        screen        \
        software-properties-common \
        ssh-import-id \
        vim           \
        wget

    yes | rpi-update || true
}

function setup_unattended_upgrades() {
    # Unattended upgrades will keep the pi up-to-date, and this function also
    # will make the pi reboot once a month.
    apt install -y \
        apt-listchanges        \
        bsd-mailx              \
        unattended-upgrades

    # After installing updates, send an email and reboot if necessary
    cat >> /etc/apt/apt.conf.d/50unattended-upgrades<<UPGRADES
Unattended-Upgrade::Mail "contact.stephen.wood@gmail.com";
Unattended-Upgrade::Automatic-Reboot "true";
Unattended-Upgrade::Automatic-Reboot-Time "03:00";
UPGRADES

    # Enable all packages and periodically clean up
    cat > /etc/apt/apt.conf.d/20auto-upgrades<<UPGRADES
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::Unattended-Upgrade "1";
APT::Periodic::Verbose "1";
APT::Periodic::AutocleanInterval "7";
UPGRADES

    # Dry run to test that everything is working
    unattended-upgrade -d -v --dry-run

    # Enable the service
    dpkg-reconfigure --priority=low unattended-upgrades -fnoninteractive
}

function setup_vim(){
    # Set VIM as the default editor
    update-alternatives --set editor /usr/bin/vim.basic

    # Vim settings (colors, syntax highlighting, tab space, etc).
    curl 'https://raw.githubusercontent.com/stephen-mw/raspberrypi/master/configuration/vimrc' \
        > /etc/vim/vimrc.local
}

function setup_user() {
    if ! id -u ${NEW_USER}; then
        useradd -m -s /bin/bash -G sudo ${NEW_USER}
    fi

    if ! [[ -d ~smw/.ssh ]]; then
        mkdir ~smw/.ssh
    fi

    ssh-import-id gh:stephen-mw -o ~smw/.ssh/authorized_keys
    chmod 600 ~smw/.ssh/authorized_keys
    chown -R smw:smw ~smw

    # Banish the Pi user
    if id -u pi; then
        userdel -rf pi
    fi

    # Remove all sudoers and allow new user to sudo without passsword
    test -f /etc/sudoers.d/010_pi-nopasswd && rm -fv /etc/sudoers.d/010_pi-nopasswd
    cat >/etc/sudoers.d/01${NEW_USER}<<SUDO
${NEW_USER} ALL=(ALL) NOPASSWD: ALL

# Allow sudo to keep using agent forwarding
Defaults    env_keep+=SSH_AUTH_SOCK
SUDO

    # Give root the normal bash stuff
    cp -r /etc/skel/. /root/
}

function setup_ssh(){
    # Make sure rng-tools is running
    systemctl start rng-tools

    pushd /etc/ssh/
    rm -rfv -- *_key
    rm -rfv -- *\.pub

    echo 'Generating a new SSH key. Can take a minute or more...'
    echo y | ssh-keygen -t ed25519 -f ssh_host_ed25519_key -N ''
    ssh-keygen -y -f ssh_host_ed25519_key > ssh_host_ed25519_pub

    # Turn off password authentication and only allow ssh
    cat >> /etc/ssh/sshd_config<<SSH
AllowUsers smw
PasswordAuthentication no
SSH

    systemctl enable ssh
    systemctl restart ssh
}

function setup_system(){
    # Log everything to the rsyslog server
    echo '*.*  @cato:514' > '/etc/rsyslog.d/custom.conf'
    systemctl restart rsyslog

    # Put your custom functions here
    cat >/etc/profile.d/custom.sh<<CUSTOM
# Better ls command
alias ll="ls -ltr"

# make less case insensitive for searches and display verbose prompt by default
export LESS="-irMS"

# Add terminal colors
export CLICOLOR=1

# Don't put duplicate lines in the history. also, don't save lines that begin
# with a whitespace character
export HISTCONTROL=erasedups:ignorespace
export HISTTIMEFORMAT='%F %T '
export HISTSIZE=20000
shopt -s histappend

# Make the bash history save for all open terminals
export PROMPT_COMMAND='history -a'

# Collapses multi-line commands into a single history item
shopt -s cmdhist

# ignore these short commands in the history
export HISTIGNORE="&:cd:fg:bg:pwd:pd:po:pushd:popd:dirs:ls:jobs:top"
CUSTOM
}

function setup_watchdog() {
    # Restart the Pi if it becomes unavailable for 10 seconds
    echo 'RuntimeWatchdogSec=10s' >> /etc/systemd/system.conf

    systemctl daemon-reexec
}

function setup_python3() {
    local VERSION=3.9.0

    apt install -y       \
        build-essential  \
        libbz2-dev       \
        libffi-dev       \
        liblzma-dev      \
        libncurses5-dev  \
        libncursesw5-dev \
        libreadline-dev  \
        libsqlite3-dev   \
        libssl-dev       \
        llvm             \
        python-openssl   \
        python-pip       \
        tk-dev           \
        xz-utils         \
        zlib1g-dev

    local OLD_PIP="$(which pip)"
    local NEW_PIP="${OLD_PIP}2.7"

    mv "${OLD_PIP}" "${NEW_PIP}"
    ln -s "${NEW_PIP}" "${OLD_PIP}"

    export PYENV_ROOT=/etc/pyenv
    export PATH="$PYENV_ROOT/bin:$PATH"

    if [[ -d "${PYENV_ROOT}" ]]; then
        rm -rfv -- "${PYENV_ROOT}"
    fi

    git clone https://github.com/pyenv/pyenv.git ${PYENV_ROOT}

    # Can't fit in /tmp because it's a ramfs
    local TMPDIR=${PYENV_ROOT}/tmp
    mkdir ${TMPDIR}

    # The latest version as of now
    echo "Setting system python to ${VERSION}. This may take several minutes..."
    CFLAGS="-O2" TMPDIR=${TMPDIR} pyenv install ${VERSION}

    rm -rf -- "${TMPDIR}"

    # Set the global version
    pyenv global ${VERSION}

    # Latest
    update-alternatives --install "$(which python)" python /etc/pyenv/versions/${VERSION}/bin/python 1
    update-alternatives --install "$(which pip)" pip /etc/pyenv/versions/${VERSION}/bin/pip 1

    # 2.7
    update-alternatives --install "$(which python)" python /usr/bin/python2.7 2
    update-alternatives --install "$(which pip)" pip /usr/bin/pip2.7 2

    # Lastly, set the system python to our new version
    # For now, skip this part.
    return

    update-alternatives --set python /etc/pyenv/versions/${VERSION}/bin/python
    update-alternatives --set pip /etc/pyenv/versions/${VERSION}/bin/pip

    pip install -U pip
}

function final_echo() {
    cat <<'FINAL'
That's it! You're done. You may want to drop a file boot called ssh:

    /boot/ssh

which will enable ssh daemon. Also you can preseed the wifi by dropping a file
in /boot/wpa_supplicant.conf:

ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
    ssid="<WIRELESS ID>"
    psk="<WIRELESS PASSWORD>"
}

which will automatically have it login to your wifi network.

Good luck!

FINAL
}


# Temporarily disabled. Not sure I like this feature.
#setup_ramfs

setup_watchdog
setup_locale
install_packages
setup_system
setup_unattended_upgrades
setup_user
setup_ssh
setup_vim
# setup_python3
final_echo

