---
- hosts: all
  vars:
    ROOT: "/etc/octoprint"
    VENV: "{{ ROOT }}/venv"
  become: yes
  tasks:
    - name: install packages
      apt:
        update_cache: true
        state: present
        name:
          - avrdude # used for flashing
          - libcamera-apps-lite
          - prusa-slicer  # Only needed for updating firmware
          - python3-opengl
          - python3-picamera2
          - python3-pip
          - python3-pyqt5
          - python3-virtualenv
    - name: Set hostname
      ansible.builtin.hostname:
        name: octoprint
        use: systemd
    - name: Update /etc/hosts file
      blockinfile:
        path: /etc/hosts
        block: |
          127.0.0.1 octoprint octoprint.local
    - name: add octoprint user
      ansible.builtin.user:
        name: octoprint
        shell: /usr/sbin/nologin
        groups:
          - dialout
          - tty
          - video
        system: true
        create_home: true
        home: "{{ ROOT }}"
    # Octoprint makes a lot of assumptions about where it's running and doesn't
    # like running out of a home directory. We're going to force it to do that
    # anyway.
    - name: setup virtualenv
      script: setup_virtualenv
      environment:
        ROOT: "{{ ROOT }}"
    - name: Install octoprint pip
      ansible.builtin.pip:
        name: octoprint
        state: latest
        extra_args: "--break-system-packages"
        virtualenv: "{{ VENV }}"
      notify:
        - restart octoprint service
    # This may not be necessary if restoring from a backup
    - name: create octoprint settings
      ansible.builtin.copy:
        src: config.yml
        dest: "{{ ROOT }}/config.yml"
        owner: octoprint
        mode: '0644'
        directory_mode: 755
    - name: setup spyglass
      script: setup_spyglass
      environment:
        DESTINATION: "/usr/local/src/spyglass"
    # Start the webcam service
    - name: Copy webcam systemd service
      ansible.builtin.template:
        src: webcam.systemd
        dest: /etc/systemd/system/webcam.service
        mode: '0440'
    - name: Start webcam service
      ansible.builtin.systemd:
        daemon_reload: yes
        state: started
        name: webcam
        enabled: yes
    - name: set directory permissions
      file:
        path: "{{ ROOT }}"
        owner: octoprint
        recurse: True
        group: octoprint
    # Start the service
    - name: Download octoprint systemd unit
      ansible.builtin.template:
        src: service.systemd
        dest: /etc/systemd/system/octoprint.service
        mode: '0440'
    - name: start octoprint service
      ansible.builtin.systemd:
        daemon_reload: yes
        state: started
        name: octoprint
        enabled: true
  handlers:
    - name: restart octoprint service
      ansible.builtin.systemd:
        daemon_reload: yes
        state: restarted
        name: octoprint
        enabled: yes

