#!/usr/bin/env bash
set -exuo pipefail

# Stratum-1 timeservers use GPS modules to keep highly accurate time from
# atomic clocks in GPS satellites
#
# This script assumes you have the PPS pin attached to GPIO 18 on your rasp-
# berrypi, as well as the TX on your GPS module attached to UART0_RXD
# (GPIO pin 15)

# The GPIO pin connected to PPS
export PPS_GPIO=18

function install_required(){
    apt update -y
    apt upgrade -y

    apt install -y             \
        asciidoctor            \
        bison                  \
        build-essential        \
        chrpath                \
        curl                   \
        git                    \
        gnuplot                \
        gpsd-clients           \
        libcap-dev             \
        libgirepository1.0-dev \
        libgtk-3-dev           \
        pps-tools              \
        python-cairo           \
        python-gi-cairo        \
        python-gi-dev          \
        python-gobject-2-dev   \
        scons                  \
        sendmail

    # This is actually a dependency of one of the pages
    apt remove -y --purge gpsd

    pip install wheel
    pip install PyGObject

}

function compile_gpsd(){
    # You should have a version of gpsd 3.17 or higher, so we'll compile it
    if ! id -u gpsd; then
        useradd -s /bin/false --system -G tty,dialout gpsd
    fi

    pushd /usr/local/src
    if [[ -d "gpsd" ]]; then
        rm -rfv -- "gpsd/"
    fi
    git clone https://git.savannah.gnu.org/git/gpsd.git
    pushd gpsd

    # Compile
    scons
    scons testregress
    scons udev-install

    cat >/etc/default/gpsd<<GPS_CONF
DEVICES="/dev/ttyS0 /dev/pps0"
GPSD_OPTIONS="-r -n -N -b"
GPS_CONF

    # We're not going to be using the socket so disable it
    systemctl stop gpsd.socket    || true
    systemctl disable gpsd.socket || true
    test -f /lib/systemd/system/gpsd.socket && rm -fv -- /lib/systemd/system/gpsd.socket

    curl -fs 'https://raw.githubusercontent.com/stephen-mw/raspberrypi/master/roles/stratum_1_timeserver/gpsd.service' \
        > /lib/systemd/system/gpsd.service

    systemctl daemon-reload
    systemctl enable gpsd
}

function setup_serial(){
    # The PPS (pulse-per-second) module on the GPS chip helps the RPI keep the
    # real-time clock highly accurate
    cp /boot/config.txt "/boot/config.txt_backup_$(date +%s)"

    cat >> /boot/config.txt<<BOOT

# Enable serial input
enable_uart=1

# Set the PPS GPIO pin for the kernel
dtoverlay=pps-gpio,gpiopin=${PPS_GPIO}
BOOT

    # Use this module at boot time
    echo 'pps-gpio' >> /etc/modules

    # Disable the serial console, which holds the device open preventing a
    # clean start of gpsd
    sed -e 's/ console=ttyAMA0,115200//g' -i /boot/cmdline.txt

    # Keep the serial process from resetting permissions
    systemctl stop serial-getty@ttyS0.service    || true
    systemctl disable serial-getty@ttyS0.service || true
    test -f /lib/systemd/system/serial-getty@.service && mv /lib/systemd/system/serial-getty@.service{,_backup}

    cat > /etc/udev/rules.d/99-gps.rules<<RULES
SUBSYSTEM=="tty", GROUP="tty", MODE="0777"
SUBSYSTEM=="pps", GROUP="tty", MODE="0664"
SUBSYSTEM=="rtc", GROUP="tty", MODE="0664"
RULES
}

function configure_chrony(){
    # Stop and disable NTP if it was enabled
    systemctl stop ntp    || true
    systemctl disable ntp || true

    # Disable systemd's time service
    systemctl stop systemd-timesyncd.service    || true
    systemctl disable systemd-timesyncd.service || true

    pushd /usr/local/src
    if [[ -d chrony ]]; then
        rm -rfv -- chrony
    fi

    if ! id -u chrony; then
        useradd --system -s /bin/false -d /tmp -G tty chrony
    fi

    git clone https://git.tuxfamily.org/chrony/chrony.git
    pushd chrony
    ./configure --enable-debug --with-user=chrony

    make
    make docs
    make install
    make install-docs

    curl -fs 'https://raw.githubusercontent.com/stephen-mw/raspberrypi/master/roles/stratum_1_timeserver/chrony.conf' \
        > /etc/chrony.conf
    curl -fs 'https://raw.githubusercontent.com/stephen-mw/raspberrypi/master/roles/stratum_1_timeserver/chrony.service' \
        > /lib/systemd/system/chrony.service

    mkdir /var/log/chrony || true
    chown -Rv chrony:chrony /var/log/chrony /var/lib/chrony

    systemctl daemon-reload
    systemctl enable chrony

    rm -rfv -- chrony
}

function help_message(){
cat <<HELP

### Installation Complete! ##

You must reboot before your system will work!


To test the PPS pin:

    $ ppstest /dev/pps0

To test your GPS lock:

    $ cgps

Good luck!

HELP
}

function setup_rtc() {
    # Setup the real time clock. This is optional
    apt -y remove fake-hwclock
    update-rc.d -f fake-hwclock remove
    systemctl disable fake-hwclock

    echo 'dtoverlay=i2c-rtc,ds3231' >> /boot/config.txt
    echo 'dtparam=i2c_arm=on' >> /boot/config.txt
    echo 'i2c-dev' >> /etc/modules
    echo 'rtc-ds1307' >> /etc/modules

    patch -u -b /lib/udev/hwclock-set<<'PATCH'
@@ -4,9 +4,9 @@

 dev=$1

-if [ -e /run/systemd/system ] ; then
-    exit 0
-fi
+#if [ -e /run/systemd/system ] ; then
+#    exit 0
+#fi

 if [ -e /run/udev/hwclock-set ]; then
     exit 0
@@ -26,10 +26,10 @@
 fi

 if [ yes = "$BADYEAR" ] ; then
-    /sbin/hwclock --rtc=$dev --systz --badyear
+#    /sbin/hwclock --rtc=$dev --systz --badyear
     /sbin/hwclock --rtc=$dev --hctosys --badyear
 else
-    /sbin/hwclock --rtc=$dev --systz
+#    /sbin/hwclock --rtc=$dev --systz
     /sbin/hwclock --rtc=$dev --hctosys
 fi

PATCH

    # Even though we have an RTC, we don't want it to set the system time on
    # shutdown because chrony is doing that.
    # TODO: this is temporarily disabled because chrony can't set the hwclock
    #echo 'HWCLOCKACCESS=no' >> '/etc/default/hwclock'
}

install_required
setup_serial
compile_gpsd
configure_chrony
setup_rtc
help_message
